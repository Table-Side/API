name: Deploy API

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch .pem file from secret storage
        run: echo '${{ secrets.AZURE_VM_SSH_KEY }}' > api.pem && chmod 600 api.pem
      
      - name: Make SSH directory
        run: mkdir -p ~/.ssh && chmod 700 ~/.ssh

      - name: Add host to known hosts
        run: ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Create server directory on VM
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} mkdir -p server

      - name: Upload docker-compose.yml to VM
        run: scp -i ./api.pem docker-compose.yml ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:server/docker-compose.yml

      - name: Upload `/apisix` directory to VM
        run: scp -i ./api.pem -r ./apisix/ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:~/server/

      - name: Upload `/app-database` directory to VM
        run: scp -i ./api.pem -r ./app-database/ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:~/server/
  
      - name: Upload `/nginx` directory to VM
        run: scp -i ./api.pem -r ./nginx/ ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:~/server/
        
      - name: Create .env file
        run: |
          echo ' # - Root Account - #' >> .env
          echo 'POSTGRES_USER="${{ secrets.POSTGRES_USER }}"' >> .env
          echo 'POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"' >> .env
          echo ' # - Kitchen DB - #' >> .env
          echo 'POSTGRES_KITCHEN_USER="${{ secrets.POSTGRES_KITCHEN_USER }}"' >> .env
          echo 'POSTGRES_KITCHEN_PASSWORD="${{ secrets.POSTGRES_KITCHEN_PASSWORD }}"' >> .env
          echo 'POSTGRES_KITCHEN_DB="${{ secrets.POSTGRES_KITCHEN_DB }}"' >> .env
          echo ' # - Order DB - #' >> .env
          echo 'POSTGRES_ORDER_USER="${{ secrets.POSTGRES_ORDER_USER }}"' >> .env
          echo 'POSTGRES_ORDER_PASSWORD="${{ secrets.POSTGRES_ORDER_PASSWORD }}"' >> .env
          echo 'POSTGRES_ORDER_DB="${{ secrets.POSTGRES_ORDER_DB }}"' >> .env
          echo ' # - Restaurant DB - #' >> .env
          echo 'POSTGRES_RESTAURANT_USER="${{ secrets.POSTGRES_RESTAURANT_USER }}"' >> .env
          echo 'POSTGRES_RESTAURANT_PASSWORD="${{ secrets.POSTGRES_RESTAURANT_PASSWORD }}"' >> .env
          echo 'POSTGRES_RESTAURANT_DB="${{ secrets.POSTGRES_RESTAURANT_DB }}"' >> .env
          echo ' # - PGAdmin - #' >> .env
          echo 'PGADMIN_DEFAULT_EMAIL="${{ secrets.PGADMIN_DEFAULT_EMAIL }}"' >> .env
          echo 'PGADMIN_DEFAULT_PASSWORD="${{ secrets.PGADMIN_DEFAULT_PASSWORD }}"' >> .env
          echo ' # - Keycloak - #' >> .env
          echo 'KEYCLOAK_CLIENT_SECRET="${{ secrets.KEYCLOAK_CLIENT_SECRET }}"' >> .env
          echo ' # - NGINX - #' >> .env
          echo 'APISIX_HOST="apisix"' >> .env
          echo 'APISIX_PORT="9080"' >> .env
          echo 'APISIX_DOMAIN="api.tableside.site"' >> .env
          echo 'LE_EMAIL="gg00528@surrey.ac.uk"' >> .env
          echo 'LE_OPTIONS="--keep-until-expiring"' >> .env
          echo 'LE_RENEW_OPTIONS="--dry-run --no-self-upgrade --post-hook 'nginx -s reload'"' >> .env
          echo 'LE_RENEW_CRON_COMMAND="echo 'Dummy cron command'"' >> .env

      - name: Upload .env file to VM
        run: scp -i ./api.pem .env ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }}:~/server/.env

      - name: Stop docker compose instance on VM (if currently running)
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} sudo docker compose -f server/docker-compose.yml down

      - name: Pull latest images on VM
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} sudo docker compose -f server/docker-compose.yml pull
      
      - name: Build `apisix`
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} sudo docker compose -f server/docker-compose.yml build apisix
      
      - name: Build `database`
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} sudo docker compose -f server/docker-compose.yml build database
      
      - name: Build `nginx`
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} sudo docker compose -f server/docker-compose.yml build nginx

      - name: Build all
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} sudo docker compose -f server/docker-compose.yml build

      - name: Run docker compose on VM
        run: ssh -i ./api.pem ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_HOST }} sudo docker compose -f server/docker-compose.yml up -d
